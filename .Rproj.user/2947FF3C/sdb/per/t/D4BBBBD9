{
    "contents" : "library(shiny)\nif (!require(FinCal)) {\n        stop(\n                \"This app requires the FinCal package. To install it, run 'install.packages(\\\"FinCal\\\")'.\\n\"\n        )\n}\nif (!require(lubridate)) {\n        stop(\n                \"This app requires the lubridate package. To install it, run 'install.packages(\\\"lubridate\\\")'.\\n\"\n        )\n}\n#The RetireEstimate function assigns an estimated annual return as well as\n#risk (or standard deviation) based on investor type\n#The risk decreases at a faster rate as you approach 5 years and then\n#slows until year 10.  Thereafter the risk changes very little.\nRetireEstimate <- function(type, years, current)\n{\n        if (type == \"Conservative\") {\n                i <- .05\n        }\n        if (type == \"Moderate\") {\n                i <- .07\n        }\n        if (type == \"Aggressive\") {\n                i <- .09\n        }\n        set.seed(42)\n        df <- data.frame(\n                Date = as.Date(character()),\n                Amt = double(),\n                stringsAsFactors = FALSE\n        )\n        y <- 0\n        m <- years * 12\n        k <- 1\n        for (k in 1:m) {\n                set.seed(42)\n                if (k < 61) {\n                        y <- .5 / 60\n                        f <- .75\n                }\n                if (k > 60 & k < 121) {\n                        y <- .15 / 60\n                        f <- .4\n                }\n                if (k > 120) {\n                        y <- .000000000001\n                        f <- .1\n                }\n                norm <- rnorm(456, i, i * (f - (k * y)))\n                newrow <-\n                        data.frame(\n                                Sys.Date() %m+% months(k), fv(\n                                        norm, k / 12, pv = current * -1, pmt = 0, type = 0\n                                )\n                        )\n                df <- rbind(df,newrow)\n        }\n        colnames(df) <- c(\"Date\", \"Estimated_Savings\")\n        df\n}\n# Define server logic for random distribution application\nshinyServer(function(input, output) {\n        #Repeat inputs and then generate a plot of the data base on the RetireEstimate function above.\n        output$inputtype <- renderPrint({\n                input$itype\n        })\n        output$inputsavings <- renderPrint({\n                input$savings\n        })\n        output$inputyrs <- renderPrint({\n                input$yrs\n        })\n        output$newplot <- renderPlot({\n                thedata <- RetireEstimate(input$itype, input$yrs, input$savings)\n                colnames(thedata) <- c(\"Date\", \"Estimated_Savings\")\n                plot(thedata, pch = 15, col = \"lightgrey\")\n                abline(lm(thedata$Estimated_Savings ~ thedata$Date),col = \"red\")\n        })\n})",
    "created" : 1456413346079.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2694837277",
    "id" : "D4BBBBD9",
    "lastKnownWriteTime" : 1456422159,
    "path" : "~/GitHub/project/retirerich/server.R",
    "project_path" : "server.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "type" : "r_source"
}